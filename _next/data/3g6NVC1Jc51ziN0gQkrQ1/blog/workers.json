{"pageProps":{"post":{"title":"搞清楚 Worker 家族","date":"2022-11-10","slug":"workers","content":"<h2>分类</h2>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b4f8af631484d82bd04f73316480397~tplv-k3u1fbpfcp-watermark.image?\" alt=\"workers.png\"></p>\n<h2>Web Workers</h2>\n<h3>背景</h3>\n<p>JS 单线程限制，执行大量计算时会阻塞渲染。于是通过 Web Worker 来减轻主线程中<em>计算密集型</em>工作。</p>\n<h3>原理</h3>\n<p>同在主浏览器进程下，存在 JS 主线程，而一旦创建了 Web Worker，它就会在 JS 主线程之外创建的 Worker 线程中执行相应的脚本代码。</p>\n<h3>特点</h3>\n<ul>\n<li>Worker 和 JS 主线程之间传递数据：发送端使用 <code>postMessage()</code> 发送数据，接收端使用事件监听器 <code>onmessage</code> 监听</li>\n<li>每个 Worker 线程中都有一个独立的全局环境，该环境不能够访问到 DOM、BOM，只能基于事件触发来传输数据</li>\n</ul>\n<h3>应用</h3>\n<p>典型场景：通常用于<em>计算密集型</em>操作，或者<em>在一个不可预知的时间访问到数据</em>。</p>\n<ul>\n<li>预加载并缓存数据供以后使用</li>\n<li>轮询和处理来自服务端的数据</li>\n<li>大数据集的计算和处理</li>\n<li>游戏中与移动相关的计算</li>\n<li>图像、视频、音频的处理和过滤</li>\n<li>处理文本数据（代码语法、拼写检查、字数）</li>\n</ul>\n<h2>Service Worker</h2>\n<h3>背景</h3>\n<p>sw 最大的意义就是提供了<em>离线打开网页</em>的功能。如果需要实现 Offline App，浏览器和服务器之间需要有一个<em>服务器代理</em>网络请求，这个服务器代理就叫 service worker。即使不是离线情况下使用，也能够优先使用缓存内容，减少对服务器请求。</p>\n<h3>原理</h3>\n<ul>\n<li>基于 web worker（一个独立于 JS 主线程的独立线程，在里面执行需要消耗大量资源的操作不会阻塞主线程）</li>\n<li>在 web worker 的基础上增加了离线缓存的能力</li>\n<li>本质上充当 Web 应用程序服务器与浏览器之间的代理服务器（可以拦截全站的请求，并作出相应的动作->由开发者指定的动作）</li>\n</ul>\n<h3>特点</h3>\n<ul>\n<li>创建有效的离线体验（将一些不常更新的内容缓存在浏览器，提高访问体验）</li>\n<li>完全异步，由事件驱动，具有生命周期</li>\n<li>可以访问 cache 和 indexDB</li>\n<li>支持推送</li>\n<li>并且可以让开发者自己控制缓存的内容和版本</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>出于安全性考虑，只有 https 可以承载 serviceWorker</li>\n<li>其生命周期完全独立于页面</li>\n</ul>\n"}},"__N_SSG":true}