{"pageProps":{"post":{"title":"富文本编辑器框架 ProseMirror、Slate 和 Lexical 横向比较","date":"2022-09-08","slug":"prosemirror-vs-slate-vs-lexical","content":"<h2>富文本编辑器的实现</h2>\n<p>通常使用 <a href=\"https://static001.geekbang.org/con/44/pdf/3673881710/file/%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B-%E7%BD%97%E9%BE%99%E6%B5%A9.pdf\">L1</a> 方案的富文本编辑器都是基于浏览器自身 <code>contentEditable</code> 属性实现的，共用了浏览器的光标和选区；对数据层进行了抽象，依赖 DOM 对内容进行渲染。</p>\n<p>L1 富文本编辑器的重点在于实现视图层和数据层的双向绑定，确保视图层的改动。</p>\n<p>本文将对以下三个的 L1 富文本编辑器进行横向比较。</p>\n<ul>\n<li><a href=\"https://github.com/ProseMirror/prosemirror\">ProseMirror</a> @0.6.0</li>\n<li><a href=\"https://github.com/ianstormtaylor/slate\">Slate</a> @v0.60.17</li>\n<li><a href=\"https://github.com/facebook/lexical\">Lexical</a> @0.3.11</li>\n</ul>\n<p>三者对于视图层绑定到数据层的实现各不一样。</p>\n<ul>\n<li>ProseMirror 通过 JS 的原生 DOM 操作做了一层封装实现渲染。</li>\n<li>Slate 通过插件化管理，将所有功能抽象成插件，不限定渲染框架。官方给出的是 <code>slate-react</code> 进行渲染，但是也可以用 <a href=\"https://github.com/worktile/slate-angular\">Angular</a>、<a href=\"https://github.com/marsprince/slate-vue\">Vue</a> 等前端框架实现视图层的渲染。</li>\n<li>Lexical 同 Slate 也使用了插件化。官方通过 <code>lexical-react</code> 进行渲染，但是并<a href=\"https://github.com/facebook/lexical/blob/main/docs/design.md\">不拘泥于特定框架</a>实现视图层。由于 Lexical 的数据结构是 Map 映射集合而不是普通对象，在渲染时需要先使用 <a href=\"\"><code>reconcileNode()</code></a> 这个方法进行节点映射集合的遍历。</li>\n</ul>\n<h2>编辑器实例</h2>\n<h4>ProseMirror</h4>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c091176b4ef4064a5ec9a36a6a82a01~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"PM instance\"></p>\n<p>定义：<a href=\"https://github.com/ProseMirror/prosemirror/blob/0.10.1/src/edit/main.js\"><code>src/edit/main.js</code></a></p>\n<p>ProseMirror 编辑器实例，使用 class 实现，<code>pm.doc</code> 代表文档的根 Node 节点，<code>pm.sel</code>代表文档的当前选区。</p>\n<p>ProseMirror 的文档节点可以分为三大类型，<code>Node</code>、<code>Fragment</code> 和 <code>Mark</code>，分别代表基本节点、基本节点数组和节点标记。</p>\n<ul>\n<li><code>Node</code> 可以拓展成为 <code>TextNode</code>，或者按照给定的 <code>schema</code> 拓展成为特定的 <code>NodeType</code> 进而用于代表段落、标题等。</li>\n<li><code>Fragment</code> 类似一个容器，主要是将其 <code>content</code> 属性中的基本节点数组包起来。</li>\n<li><code>Mark</code> 类似一个占位符，用来表现某一个 <code>TextNode</code> 所含有的特征。</li>\n</ul>\n<h4>Slate</h4>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e62bc858758c4f83a2de7ffedd593eec~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"Slate instance\"></p>\n<p>定义：<a href=\"https://github.com/ianstormtaylor/slate/blob/v0.61.3/packages/slate/src/create-editor.ts\"><code>packages/slate/src/create-editor.ts</code></a></p>\n<p>Slate 的实例对象，与 ProseMirror 用类实现不同，Slate 采用了纯对象表示编辑器实例。</p>\n<blockquote>\n<p>Slate 的早期也是基于 class 实现的，但是从 Immutable.js 切换到 Immer 的<a href=\"https://github.com/ianstormtaylor/slate/issues/2345#issue-374819376\">重构</a>后，转向了使用纯 JS 对象作为数据结构。</p>\n</blockquote>\n<p>该实例节点就是文档的根节点，可以从 <code>editor.children</code> 获取到整个文档所有的子节点；<code>editor.selection</code> 代表文档的当前选区。</p>\n<h4>Lexical</h4>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56d741b849fa4826af2e8f7fb8e1e190~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>定义：<a href=\"https://github.com/facebook/lexical/blob/v0.4.0/packages/lexical/src/LexicalEditor.ts\"><code>packages/lexical/src/LexicalEditor.ts</code></a></p>\n<p>Lexical 编辑器实例，使用 class 实现，<code>editor._editorState._nodeMap</code> 代表文档的节点合集，<code>editor._editorState._selection</code> 代表文档的当前选区。</p>\n<p><strong>Lexical 的独特之处</strong></p>\n<p>Lexical 的节点是通过 Map 存储的（如下图），这和 Slate、ProseMirror 的树状数据结构有本质差异，主要体现在单个节点修改的效率和内存占用上。</p>\n<ul>\n<li>优点：Map 结构存储的内容能够很快增删改某个特定节点，而对于树状数据结构，为了保证数据是持久化的 <a href=\"https://en.wikipedia.org/wiki/Single_source_of_truth\">Single source of truth</a>，必须按照不可变数据的理念（Immutable）去生成一个新对象，造成内存占用增大的问题。</li>\n<li>缺点：相应地，由于存储 Map 的结构不能够很好地表达实际渲染出来 DOM 结果的层次，所以在每次渲染的时候，需要做一次协调（Reconcilation）去生成层次结构，<a href=\"https://github.com/facebook/lexical/blob/main/docs/design.md\">可以把它想象成 React</a>，它通过双重缓存实现单向数据流渲染。</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ae64955afd1a4aa8beb5fb4e40f0d9c2~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<h2>选区 Selection</h2>\n<h4>ProseMirror</h4>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27ebb9befd7d4af59dbf5ac8782c1c1a~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p>定义：<a href=\"https://github.com/ProseMirror/prosemirror/blob/0.10.1/src/edit/selection.js\"><code>src/edit/selection.js</code></a></p>\n<p>ProseMirror 通过 <code>poll</code>的方式确定选区，也即轮询。每隔 100ms 就会对当前光标位置进行一次轮询，调用 <code>readFromDOM()</code> 从 DOM 读取真实选区并设置到编辑器实例的<code>sel</code>属性中。</p>\n<p>通过 <code>window.getSeleciton()</code> 获取的真实选区会被转化成 <code>TextSelection</code> 并存储在 <code>sel.range</code> 中。此外还存储了上一次的真实选区在 <code>sel</code> 中，目的是用来比较判断 DOM 选区是否发生了变化。若没有发生变化，则不需要执行 <code>readFromDOM()</code>。</p>\n<p>PS: 因为轮询更新选区的特性，在 demo 中快速输入中文时出现了光标的跑到行尾的问题。</p>\n<h4>Slate</h4>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/daadeb4c8278435ab4b3ebfd2ba8e1b0~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"slate_selection\"></p>\n<p>定义：<a href=\"https://github.com/ianstormtaylor/slate/blob/v0.61.3/packages/slate/src/interfaces/editor.ts\"><code>packages/slate/src/interfaces/editor.ts</code></a></p>\n<p>Slate 的选区是原生浏览器的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Selection\"><code>Selection</code></a> 之上的一层抽象，形如：</p>\n<pre><code>type Path = number[]\ninterface Point {\n  path: Path\n  offset: number\n}\ninterface Range {\n  anchor: Point\n  focus: Point\n}\ninterface Selection = Range | null\n</code></pre>\n<p>Slate 强大的地方在于它将 DOM 渲染出来的节点的可选区域抽象成 <code>Path</code>、<code>Point</code>、<code>Range</code> 等数据结构，一旦理解了它的设计逻辑，就能够很方便地定位到编辑器内某一个特定的范围，从而轻松实现插入、删除、移动等节点变换操作。</p>\n<h4>Lexical</h4>\n<p>Lexical 的选区包含 <code>anchor</code> 和 <code>focus</code> 两个点，并且在每个 <code>Point</code> 中存储了一份对当前 <code>_seletion</code> 的引用（循环引用）。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/439f9908800245a1bd452ce70497f814~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\"></p>\n<p>定义：<a href=\"https://github.com/facebook/lexical/blob/v0.4.0/packages/lexical/src/LexicalSelection.ts\"><code>packages/lexical/src/LexicalSelection.ts</code></a></p>\n<h2>规范化处理</h2>\n<p>规范化（Normalize）处理决定了一个编辑器的形状是否稳定。剪贴板中的 HTML 千奇百怪、不可预测，在富文本编辑器中粘贴时，未知的 HTML 处理起来十分棘手。兜底的方法是将 HTML 转成纯文本，但是这样就显得不够“富文本”了。</p>\n<h4>ProseMirror</h4>\n<p>采用了 Schema 定义文档的形状：<code>SchemaSpec</code> 类定义文档支持的 <code>marks</code> 和 <code>nodes</code>，<code>Schema</code> 类接收 <code>SchemaSpec</code> 为参数，并定义文章的形状。</p>\n<p><code>SchemaItem</code> 是所有的 <code>NodeType</code> 的父类，也就是说，所有的元素都继承了 <code>SchemaItem.register()</code> 方法用于注册各元素的规则。并且是根据事件进行触发，对所有继承了 <code>SchemaItem</code> 类的元素节点进行 <code>register</code> 注册相应命名空间 <code>namespace</code> 的某个类型的 <code>name</code> ，并指明对应要做的操作，这样就能够在不同的处理步骤（如解析 DOM 节点）中对各个节点进行特定的处理。</p>\n<h4>Slate</h4>\n<p>Slate 在早期（v0.47 前）使用了和 ProseMirror 一样采用了 <code>Schema</code> 的形式，用 JS 模板对象限定了不同类型的操作。但是 v0.50 后 Slate 将组件进行了插件化拆分，每个组件都作为一个插件有一套独立的处理逻辑，通过组件插件的 <code>normalizeNode</code> 可以对组件进行修剪等处理操作。</p>\n<h4>Lexical</h4>\n<p>Lexical 采用的规范化处理方式包括 <code>_htmlConversions</code> （负责剪贴板内容的粘贴）、<code>LexicalUpdates</code> （负责合并同类型文本节点）等。</p>\n<p>后者的 <code>Update</code> 是 Lexical 中定时处理步骤，每当 <code>editor._observer</code> （即 MutationObserver）监听到 DOM 节点发生变化，就会批量更新对应的虚拟节点，实现数据的同步。在 <code>Update</code> 的过程中，就会对编辑器内容进行规范化操作。</p>\n<h2>原子操作</h2>\n<p>这三款编辑器都支持使用 <a href=\"https://github.com/yjs/yjs\">Yjs</a> 实现协同编辑，底层满足 <a href=\"https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type\">CRDT</a> 的数据结构模型，ProseMirror 和 Slate 均是<strong>基于操作</strong>实现 CRDT 的，而 Lexical 则是<strong>基于状态</strong>实现 CRDT 的。</p>\n<h4>ProseMirror</h4>\n<p>ProseMirror 中操作变化都被当作 Operation 存储起来，在每个 <code>requestAnimationFrame</code> （宏任务）的循环中通过 <code>pm.flush</code> 被批量调用。</p>\n<p>Operation 决定了更新 DOM 的最少步骤，存储在 <code>pm.operation</code> 中。</p>\n<p>定义：<a href=\"https://github.com/ProseMirror/prosemirror/blob/0.10.1/src/edit/main.js\"><code>src/edit/main.js</code></a></p>\n<pre><code>class Operation {\n  constructor(pm) {\n    this.doc = pm.doc\n    this.sel = pm.sel.range\n    this.scrollIntoView = false\n    this.focus = false\n    this.composingAtStart = !!pm.input.composing\n  }\n}\n</code></pre>\n<h4>Slate</h4>\n<p>Slate 是基于 Operation 的操作的。每个原子操作都通过了 <code>editor.apply</code> 去执行，实现上和 ProseMirror 类似，不过是通过 <code>Promise.resolve()</code> （微任务）的循环中通过 <code>editor.onChange()</code> 被批量调用。</p>\n<p>定义：<a href=\"https://github.com/ianstormtaylor/slate/blob/v0.61.3/packages/slate/src/transforms/general.ts\"><code>packages/slate/src/transforms/general.ts</code></a></p>\n<p>Operation 的种类包括：<code>insert_text</code>、<code>remove_text</code>、<code>insert_node</code>、<code>merge_node</code>、 <code>remove_node</code>、<code>move_node</code>、<code>set_node</code>、<code>split_node</code>。</p>\n<p>详见： <a href=\"https://juejin.cn/post/7034480408888770567\">Slate.js 之 Operation 概述</a></p>\n<h4>Lexical</h4>\n<p>Lexical 中存储的数据结构是散列表映射，因此对于这个数据结构来说，只需要进行映射记录之间的更新即可让数据实现同步。</p>\n<p>Lexical 中使用了 <a href=\"https://github.com/facebook/lexical/blob/v0.4.0/packages/lexical-yjs/src/CollabElementNode.ts\"><code>CollabElementNode</code></a> 作为共享数据类型的存储，通过 <code>$createCollabNodeFromLexicalNode()</code> 函数将普通的节点转化为共享数据类型节点，该节点上会挂载一个实现了 <a href=\"https://docs.yjs.dev/api/shared-types/y.map\"><code>Y.Map</code></a> 类的 <code>_map</code> 的属性。</p>\n<h2>总结</h2>\n<p>本文通过对比不同富文本编辑器框架的一些实现，分析了编辑器实例、选区、规范化、原子操作等。</p>\n<ul>\n<li>\n<p>ProseMirror 登场比较早，<a href=\"https://prosemirror.net/docs/guide/\">使用文档</a>详尽，插件丰富，功能强大，但是 API 略显晦涩。</p>\n</li>\n<li>\n<p>Slate 最受欢迎（star 数领先），支持纯 JS 对象作为文档结构、个性化组件、丰富的 API、上手成本低，是很多编辑器的灵感来源，如语雀、Aomao。</p>\n</li>\n<li>\n<p>Lexical 新兴力量，背靠 Facebook，映射结构、可以基于状态实现协同。<a href=\"https://discuss.prosemirror.net/t/choosing-between-prosemirror-and-slate/1596\">此外</a>，它的 DOM 节点不受外部插件影响以及原生支持 React 18+ 的 Cocurrency 实现局部渲染性能优化。</p>\n</li>\n</ul>\n<p>以上三者均未实现 1.0 的突破，未能保证稳定，使用时还需要进行一些额外的开发。</p>\n"}},"__N_SSG":true}